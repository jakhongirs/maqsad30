# Generated by Django 5.1.6 on 2025-03-10 12:40

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):
    dependencies = [
        ("main", "0021_userchallenge_has_award_userchallenge_is_active"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="SuperChallenge",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="Created at"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="Updated at"),
                ),
                ("title", models.CharField(max_length=255, verbose_name="Title")),
                (
                    "description",
                    models.TextField(blank=True, null=True, verbose_name="Description"),
                ),
                (
                    "icon",
                    models.ImageField(
                        upload_to="super_challenge_icons/", verbose_name="Icon"
                    ),
                ),
                (
                    "calendar_icon",
                    models.ImageField(
                        blank=True,
                        null=True,
                        upload_to="super_challenge_calendar_icons/",
                        verbose_name="Calendar Icon",
                    ),
                ),
                (
                    "award_icon",
                    models.ImageField(
                        blank=True,
                        null=True,
                        upload_to="super_challenge_award_icons/",
                        verbose_name="Award Icon",
                    ),
                ),
                ("start_date", models.DateField(verbose_name="Start Date")),
                ("end_date", models.DateField(verbose_name="End Date")),
                (
                    "challenges",
                    models.ManyToManyField(
                        related_name="super_challenges",
                        to="main.challenge",
                        verbose_name="Challenges",
                    ),
                ),
            ],
            options={
                "verbose_name": "Super Challenge",
                "verbose_name_plural": "Super Challenges",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="SuperChallengeAward",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="Created at"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="Updated at"),
                ),
                (
                    "super_challenge",
                    models.OneToOneField(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="award",
                        to="main.superchallenge",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="UserSuperChallenge",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="Created at"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="Updated at"),
                ),
                (
                    "current_streak",
                    models.PositiveIntegerField(
                        default=0, verbose_name="Current streak"
                    ),
                ),
                (
                    "highest_streak",
                    models.PositiveIntegerField(
                        default=0, verbose_name="Highest streak"
                    ),
                ),
                (
                    "total_completions",
                    models.PositiveIntegerField(
                        default=0, verbose_name="Total completions"
                    ),
                ),
                (
                    "last_completion_date",
                    models.DateField(
                        blank=True, null=True, verbose_name="Last completion date"
                    ),
                ),
                (
                    "started_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="Started at"),
                ),
                (
                    "is_active",
                    models.BooleanField(default=True, verbose_name="Is active"),
                ),
                (
                    "has_award",
                    models.BooleanField(default=False, verbose_name="Has award"),
                ),
                (
                    "is_failed",
                    models.BooleanField(default=False, verbose_name="Is failed"),
                ),
                (
                    "super_challenge",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="user_super_challenges",
                        to="main.superchallenge",
                        verbose_name="Super Challenge",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="user_super_challenges",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="User",
                    ),
                ),
            ],
            options={
                "verbose_name": "User Super Challenge",
                "verbose_name_plural": "User Super Challenges",
                "ordering": ["-current_streak", "-highest_streak"],
                "unique_together": {("user", "super_challenge")},
            },
        ),
        migrations.CreateModel(
            name="UserSuperChallengeCompletion",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="Created at"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="Updated at"),
                ),
                ("completed_at", models.DateTimeField(verbose_name="Completed at")),
                (
                    "is_active",
                    models.BooleanField(default=True, verbose_name="Is Active"),
                ),
                (
                    "user_super_challenge",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="completions",
                        to="main.usersuperchallenge",
                        verbose_name="User super challenge",
                    ),
                ),
            ],
            options={
                "verbose_name": "User Super Challenge Completion",
                "verbose_name_plural": "User Super Challenge Completions",
                "ordering": ["-completed_at"],
            },
        ),
        migrations.CreateModel(
            name="UserSuperAward",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="Created at"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="Updated at"),
                ),
                (
                    "super_challenge_award",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="user_awards",
                        to="main.superchallengeaward",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="super_awards",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "unique_together": {("user", "super_challenge_award")},
            },
        ),
    ]
